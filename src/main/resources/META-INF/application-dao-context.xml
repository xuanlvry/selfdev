<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:redisson="http://redisson.org/schema/redisson"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://redisson.org/schema/redisson http://redisson.org/schema/redisson/redisson.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">

    <description>FACADE DAO公共配置文件</description>

    <!-- 开启声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- proxy-target-class设为false（默认）：JDK动态代理（基于接口）将起作用。可以将@Transactional放置在接口和具体类上。 -->
    <!-- proxy-target-class设为true：CGLIB动态代理（基于类）将起作用（这时需要cglib库）。只能将@Transactional放置在具体类上。 -->
    <!-- Spring团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。-->

    <!-- JDBC事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 编程式事务配置 -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- 配置数据源, 使用DBCP数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 数据库连接信息 -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!--2018-06-13T06:03:43.997795Z 1 [Note] A temporary password is generated for root@localhost: ;QUVnAqhT4fx
            If you lose this password, please consult the section How to Reset the Root Password in the MySQL reference manual.-->
        <property name="url" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true"/>
        <property name="username" value="root"/>
        <property name="password" value=";QUVnAqhT4fx"/>

        <!-- 连接池配置 -->
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="100"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
    </bean>

    <!-- - - - - - - - - - - - - - - - - - - - - mybatis 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--MyBatis配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/META-INF/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:/META-INF/mapper/*.xml"/>
    </bean>

    <!-- 扫描mappers自动配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sun.dev.dao.mybatis"/>
    </bean>

    <!-- - - - - - - - - - - - - - - - - - - - - Spring data jpa 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--    <jpa:repositories base-package="com.sun.dev.dao.springdatajpa"-->
<!--                      entity-manager-factory-ref="entityManagerFactory"-->
<!--                      transaction-manager-ref="jpaTransactionManager"/>-->

<!--    <bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
<!--        <property name="entityManagerFactory" ref="entityManagerFactory"/>-->
<!--    </bean>-->

<!--    <bean id="entityManagerFactory"-->
<!--          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--        <property name="packagesToScan" value="com.sun.dev.dao.entity"/>-->
<!--        <property name="jpaVendorAdapter">-->
<!--            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">-->
<!--                <property name="generateDdl" value="true"/>-->
<!--                <property name="showSql" value="true"/>-->
<!--            </bean>-->
<!--        </property>-->
<!--    </bean>-->

    <!-- - - - - - - - - - - - - - - - - - - - - Spring Batch 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">-->
        <!--<property name="jobRepository" ref="jobRepository"/>-->
    <!--</bean>-->

    <!--<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">-->
        <!--<property name="transactionManager" ref="transactionManager"/>-->
        <!--<property name="databaseType" value="MySQL"/>-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">-->
        <!--<property name="transactionManager" ref="transactionManager"/>-->
    <!--</bean>-->

    <!--<bean id="itemReader" class="org.mybatis.spring.batch.MyBatisPagingItemReader" scope="step">-->
        <!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
        <!--<property name="pageSize" value="10"/>-->
        <!--<property name="queryId" value="com.my.test.mybatis.IUserMapper.getUser"/>-->
        <!--<property name="parameterValues">-->
            <!--<map>-->
                <!--<entry key="age" value="#{jobParameters['age']}"/>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<util:map id="datesParameters" scope="step">-->
        <!--<entry key="id" value="#{jobExecutionContext['id']}"/>-->
        <!--<entry key="today" value="#{jobExecutionContext['TODAY_DATE']}"/>-->
        <!--<entry key="first_day_of_the_month" value="#{jobExecutionContext['FIRST_DAY_OF_THE_MONTH_DATE']}"/>-->
        <!--<entry key="first_day_of_the_previous_month"-->
               <!--value="#{jobExecutionContext['FIRST_DAY_OF_THE_PREVIOUS_MONTH_DATE']}"/>-->
    <!--</util:map>-->

    <!--<bean id="itemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" scope="step">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="sql" value="select * from user"/>-->
        <!--<property name="rowMapper">-->
            <!--<bean class="UserRowMapper"/>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="itemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="queryProvider">-->
            <!--<bean class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">-->
                <!--<property name="dataSource" ref="dataSource"/>-->
                <!--<property name="selectClause" value="select *"/>-->
                <!--<property name="fromClause" value="from user"/>-->
                <!--<property name="whereClause" value="where age>:age"/>-->
                <!--<property name="sortKey" value="id"/>-->
            <!--</bean>-->
        <!--</property>-->
        <!--<property name="parameterValues">-->
            <!--<map>-->
                <!--<entry key="age" value="#{jobParameters['age']}"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="pageSize" value="3"/>-->
        <!--<property name="rowMapper">-->
            <!--<bean class="UserRowMapper"/>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="itemWriter" class="org.mybatis.spring.batch.MyBatisBatchItemWriter" scope="prototype">-->
        <!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
        <!--<property name="statementId" value="com.my.test.mybatis.IUserMapper.updateUser"/>-->
    <!--</bean>-->

    <!--<bean id="testProcessor" class="TestProcessor"/>-->
    <!--<bean id="testWriter" class="TestWriter"/>-->

    <!--<batch:job id="testjob">-->
        <!--<batch:step id="step1">-->
            <!--<tasklet>-->
                <!--<chunk reader="itemReader" processor="testProcessor" writer="testWriter" commit-interval="2"/>-->
            <!--</tasklet>-->
        <!--</batch:step>-->
    <!--</batch:job>-->

    <!-- - - - - - - - - - - - - - - - - - - - - Hibernate 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- 定义事务管理 -->
    <!--<bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory"/>-->
    <!--</bean>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="txPointcut" expression="execution(* com.my.test.hibernate..*.*(..))"/>-->
        <!--<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->

    <!--<tx:advice id="txAdvice" transaction-manager="hibernateTransactionManager">-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; name 为 方法名 &ndash;&gt;-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="list*" read-only="true"/>-->
            <!--<tx:method name="**" propagation="REQUIRED"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="packagesToScan">-->
            <!--&lt;!&ndash;设置spring去哪个包中查找相应的实体类&ndash;&gt;-->
            <!--<list>-->
                <!--<value>com.my.test</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="hibernateProperties">-->
            <!--<value>-->
                <!--&lt;!&ndash; 数据源的不同，这里的dialect也不一样 &ndash;&gt;-->
                <!--hibernate.dialect=org.hibernate.dialect.MySQLDialect-->
                <!--hibernate.show_sql=true-->
                <!--hibernate.format_sql=true-->
                <!--hibernate.hbm2ddl.auto=none-->
                <!--hibernate.jdbc.batch_size=20-->
                <!--hibernate.validator.apply_to_ddl=false-->
                <!--hibernate.validator.autoregister_listeners=false-->
            <!--</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- - - - - - - - - - - - - - - - - - - - - MongoDB 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--<mongo:mongo id="mongo" host="${mongodb.host}" port="${mongodb.port}"/>-->

    <!--<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">-->
        <!--<constructor-arg ref="mongo"/>-->
        <!--<constructor-arg name="databaseName" value="mytest"/>-->
    <!--</bean>-->

    <!--<mongo:db-factory id="mongoDbFactory" dbname="mytest" mongo-ref="mongo"/>-->

    <!--<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">-->
        <!--<constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>-->
    <!--</bean>-->

    <!--<mongo:repositories base-package="com.my.test.mongo">-->
        <!--<mongo:repository id="accountDao"/>-->
    <!--</mongo:repositories>-->
    <!--<bean id="userInfoDAO" class="com.my.test.mongo.UserInfoDAO"/>-->

    <!--<mongo:repositories base-package="com.my.test.mongo"/>-->

    <!-- - - - - - - - - - - - - - - - - - - - - redis 配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--<bean id="jedisFactory"-->
          <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"-->
          <!--p:host-name="172.16.89.132" p:port="6379" p:use-pool="true"/>-->

    <!-- User Redis Template配置 -->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"-->
          <!--p:connection-factory-ref="jedisFactory"/>-->

    <!-- redisson单机最基本配置 -->
    <redisson:client>
        <redisson:single-server address="redis://172.16.89.132:6379"/>
    </redisson:client>

    <!--<redisson:client>-->
        <!--<redisson:cluster-servers>-->
            <!--<redisson:node-address value="redis://172.16.89.129:6379"/>-->
            <!--<redisson:node-address value="redis://172.16.89.130:6379"/>-->
            <!--<redisson:node-address value="redis://172.16.89.131:6379"/>-->
        <!--</redisson:cluster-servers>-->
    <!--</redisson:client>-->

    <!-- - - - - - - - - - - - - - - - - - - - - memcached java client配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--&lt;!&ndash;memcatched连接池&ndash;&gt;-->
    <!--<bean id="memCachedPool" class="com.whalin.MemCached.SockIOPool"-->
          <!--factory-method="getInstance" init-method="initialize" destroy-method="shutDown">-->
        <!--<constructor-arg>-->
            <!--<value>memCachedPool</value>-->
        <!--</constructor-arg>-->
        <!--<property name="servers">-->
            <!--&lt;!&ndash; 分布式，添加多台 &ndash;&gt;-->
            <!--<list>-->
                <!--<value>127.0.0.1:11211</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--&lt;!&ndash;初始连接数&ndash;&gt;-->
        <!--<property name="initConn" value="20"/>-->
        <!--&lt;!&ndash;最小连接数&ndash;&gt;-->
        <!--<property name="minConn" value="10"/>-->
        <!--&lt;!&ndash;最大连接数&ndash;&gt;-->
        <!--<property name="maxConn" value="50"/>-->
        <!--&lt;!&ndash;设置连接池维护线程的睡眠时间&ndash;&gt;-->
        <!--<property name="maintSleep" value="3000"/>-->
        <!--&lt;!&ndash;设置是否使用Nagle算法（Socket的参数），如果是true在写数据时不缓冲，立即发送出去&ndash;&gt;-->
        <!--<property name="nagle" value="false"/>-->
        <!--&lt;!&ndash;设置socket的读取等待超时时间&ndash;&gt;-->
        <!--<property name="socketTO" value="3000"/>-->
    <!--</bean>-->

    <!--<bean clientient" class="com.whalin.MemCached.MemCachedClient">-->
        <!--&lt;!&ndash;在初始化MemecachedClient时，需要在其构造函数中指明poolname。-->
        <!--如果没有声明poolname,则MemechachedClient则或获取名为default的Pool实例&ndash;&gt;-->
        <!--<constructor-arg>-->
            <!--<value>memCachedPool</value>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!-- - - - - - - - - - - - - - - - - - - - - xmemcached配置 - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!--Memcached客户端工厂配置-->
    <!--<bean name="xmemcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder"-->
          <!--p:connectionPoolSize="10" p:failureMode="true">-->
        <!--<constructor-arg>-->
            <!--<list>-->
                <!--<bean class="java.net.InetSocketAddress">-->
                    <!--<constructor-arg>-->
                        <!--<value>127.0.0.1</value>-->
                    <!--</constructor-arg>-->
                    <!--<constructor-arg>-->
                        <!--<value>11211</value>-->
                    <!--</constructor-arg>-->
                <!--</bean>-->
            <!--</list>-->
        <!--</constructor-arg>-->

        <!--&lt;!&ndash; 多服务器时，权重设置 &ndash;&gt;-->
        <!--<constructor-arg>-->
            <!--<list>-->
                <!--<value>1</value>-->
            <!--</list>-->
        <!--</constructor-arg>-->

        <!--&lt;!&ndash; 使用二进制协议通讯，默认为TextCommandFactory &ndash;&gt;-->
        <!--<property name="commandFactory">-->
            <!--<bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"></bean>-->
        <!--</property>-->

        <!--&lt;!&ndash; 分布式策略 &ndash;&gt;-->
        <!--<property name="sessionLocator">-->
            <!--<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>-->
        <!--</property>-->

        <!--&lt;!&ndash; 序列化转码器 &ndash;&gt;-->
        <!--<property name="transcoder">-->
            <!--<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"/>-->
        <!--</property>-->

        <!--&lt;!&ndash; 缓冲区分配器 &ndash;&gt;-->
        <!--<property name="bufferAllocator">-->
            <!--<bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"></bean>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean name="xmemcachedClient" factory-bean="xmemcachedClientBuilder" factory-method="build" destroy-method="shutdown" />-->

</beans>