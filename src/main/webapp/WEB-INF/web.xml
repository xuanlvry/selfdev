<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <!--定义WEB应用名字-->
    <display-name>sun-dev</display-name>
    <!--声明WEB应用的描述信息-->
    <description>描述信息</description>

    <!-- context-param元素声明应用范围内的初始化参数 -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>com.sun.dev.root</param-value>
    </context-param>

    <!-- Spring ApplicationContext配置文件的路径,可使用通配符,多个路径用,号分隔 此参数用于后面的Context Loader -->
    <context-param>
        <description>Spring Configuration File</description>
        <param-name>contextConfigLocation</param-name>
        <!-- 指定Spring配置文件所在目录 -->
        <!-- 如果没有该配置，则spring会去加载/WEB-INF/applicationContext.xml -->
        <param-value>
            classpath:/META-INF/application-context.xml,
            classpath:/META-INF/application-dao-context.xml
            <!--classpath:/META-INF/application-shiro-cas-context.xml-->
            <!--classpath:/META-INF/application-shiro-context.xml-->
        </param-value>
    </context-param>

    <listener>
        <!-- Spring配置 ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息 -->
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--&lt;!&ndash; 该过滤器用于实现单点登出功能，可选配置。 &ndash;&gt;-->
    <!--<listener>-->
        <!--<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>-->
    <!--</listener>-->
    <!--<filter>-->
        <!--<filter-name>CAS Single Sign Out Filter</filter-name>-->
        <!--<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>CAS Single Sign Out Filter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- 该过滤器负责用户的认证工作，必须启用它 -->
    <!--<filter>-->
        <!--<filter-name>CAS Authentication Filter</filter-name>-->
        <!--<filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>-->
        <!--<init-param>-->
            <!--<param-name>casServerLoginUrl</param-name>-->
            <!--<param-value>http://localhost:8080/login</param-value>-->
        <!--</init-param>-->
        <!--<init-param>-->
            <!--<param-name>serverName</param-name>-->
            <!--<param-value>http://localhost:8081</param-value>-->
        <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>CAS Authentication Filter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->
    <!--<filter>-->
        <!--<filter-name>CAS Validation Filter</filter-name>-->
        <!--<filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>-->
        <!--<init-param>-->
            <!--<param-name>casServerUrlPrefix</param-name>-->
            <!--<param-value>http://localhost:8080</param-value>-->
        <!--</init-param>-->
        <!--<init-param>-->
            <!--<param-name>serverName</param-name>-->
            <!--<param-value>http://localhost:8081</param-value>-->
        <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>CAS Validation Filter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- 该过滤器负责实现HttpServletRequest请求的包裹，比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
    <!--<filter>-->
        <!--<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>-->
        <!--<filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
    <!--<filter>-->
        <!--<filter-name>CASAssertion Thread LocalFilter</filter-name>-->
        <!--<filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>CASAssertion Thread LocalFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- apache shiro -->
    <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <!--<filter>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
        <!--<init-param>-->
            <!--&lt;!&ndash; 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 &ndash;&gt;-->
            <!--<param-name>targetFilterLifecycle</param-name>-->
            <!--<param-value>true</param-value>-->
        <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--springMVC-->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--    &lt;!&ndash;servlet filter&ndash;&gt;-->
<!--    <filter>-->
<!--        <filter-name>firstFilter</filter-name>-->
<!--        <filter-class>com.sun.dev.filterAndInterceptor.FirstFilter</filter-class>-->
<!--    </filter>-->
<!--    <filter-mapping>-->
<!--        <filter-name>firstFilter</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->

<!--    <filter>-->
<!--        <filter-name>secondFilter</filter-name>-->
<!--        <filter-class>SecondFilter</filter-class>-->
<!--    </filter>-->
<!--    <filter-mapping>-->
<!--        <filter-name>secondFilter</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->

    <!--struts2-->
    <!--<filter>-->
        <!--&lt;!&ndash; 拦截器名称 &ndash;&gt;-->
        <!--<filter-name>struts2</filter-name>-->
        <!--<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--&lt;!&ndash; 映射 &ndash;&gt;-->
        <!--<filter-name>struts2</filter-name >-->
        <!--&lt;!&ndash; 匹配模式，截取任何形式的请求 &ndash;&gt;-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--<session-config>-->
        <!--<session-timeout>1</session-timeout>-->
    <!--</session-config>-->
</web-app>